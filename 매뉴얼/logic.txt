
(1) Setting.ini
운영 중에 재부팅할 가능성도 있으므로, 부팅 후에 motor 상태를 읽어와서 idle_motors[], busy_motors[]를 초기화함

config.py
    init_setting()
        config_to_pv()
            idle_motors [] 초기화
            busy_motors [] 초기화

(2) Modbus write

* 모터 운전 모드 변경(18, 19, 20)
  * 수동(0)/자동(1)
    * 모터 상태는 바꾸지 않고 모드만 바꿈
      * 모드를 자동으로 변경할 때, 모터 상태는 pump_monitor()에서 처리하도록 함
      * 모드를 수종으로 변경할 때, 모터 상태는 사용자가 Modbus로 직접 변경하도록 함 

* 모터 상태 변경(14, 15, 16)
  * pump_variables.
    * pump1_config 
    * pump2_config 
    * pump3_config
  * pump_variables.set_modbus_sequence()
    * 모터 운전 모드(18,19,20)이 0(수동)일 때만 모터 상태가 변경되도록 함
    * 또한, 운전 모드가 AUTO일 때도 Modbus data를 변경함

* 모터 상태 초기화
  # 부팅 직후에는 모터 상태를 읽어와서 idle, busy 리스트 초기화
  # Modbus db에 저장할 필요는 없음. Modbus에서 항상 직접 모터 상태를 읽어감


* pump_monitor()
    * 수위값 읽어옴
    * 일정 시간동안 수위 변화가 없으면
        * pv.source = constant.SOURCE_AI
        * motor.set_run_mode(chip, SOURCE_AI)
        * fl = pv.get_future_level()
            * fl < 0
            * 학습
        * fl >= 0
            * 추론하여 수위값 갱신 water_level = future_level
            * pv.water_level = fl
    * 수위값이 변화하면
        * pv.source = constant.SOURCE_SENSOR
        * motor.set_run_mode(chip, constant.SOURCE_SENSOR)
  
    determine_motor_state(pv, chip)
    (m0, m1, m2) = motor.get_all_motors(chip)
    pv.append_data([time_str, pv.water_level, m0, m1, m2, pv.source])
    ADC.writeDAC(chip, int(ADC.waterlevel_rate2ADC(pv, pv.water_level)), spi)
    sm.update_idle()
